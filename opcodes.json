{
  "00": {
    "input": "",
    "output": "",
    "description": "Halts execution",
    "note": "",
    "group": "Stop and Arithmetic Operations"
  },
  "01": {
    "input": "a | b",
    "output": "a + b",
    "description": "Addition operation",
    "note": "",
    "group": "Stop and Arithmetic Operations"
  },
  "02": {
    "input": "a | b",
    "output": "a * b",
    "description": "Multiplication operation",
    "note": "",
    "group": "Stop and Arithmetic Operations"
  },
  "03": {
    "input": "a | b",
    "output": "a - b",
    "description": "Subtraction operation",
    "note": "",
    "group": "Stop and Arithmetic Operations"
  },
  "04": {
    "input": "a | b",
    "output": "a // b",
    "description": "Integer division operation",
    "note": "",
    "group": "Stop and Arithmetic Operations"
  },
  "05": {
    "input": "a | b",
    "output": "a // b",
    "description": "Signed integer division operation (truncated)",
    "note": "Where all values are treated as two’s complement signed 256-bit integers. Note the overflow semantic when −2**255 is negated",
    "group": "Stop and Arithmetic Operations"
  },
  "06": {
    "input": "a | b",
    "output": "a % b",
    "description": "Modulo remainder operation",
    "note": "",
    "group": "Stop and Arithmetic Operations"
  },
  "07": {
    "input": "a | b",
    "output": "a % b",
    "description": "Signed modulo remainder operation",
    "note": "Where all values are treated as two’s complement signed 256-bit integers",
    "group": "Stop and Arithmetic Operations"
  },
  "08": {
    "input": "a | b | N",
    "output": "(a + b) % N",
    "description": "Modulo addition operation",
    "note": "All intermediate calculations of this operation are not subject to the 2**256 modulo",
    "group": "Stop and Arithmetic Operations"
  },
  "09": {
    "input": "a | b | N",
    "output": "(a * b) % N",
    "description": "Modulo multiplication operation",
    "note": "All intermediate calculations of this operation are not subject to the 2**256 modulo",
    "group": "Stop and Arithmetic Operations"
  },
  "0a": {
    "input": "a | b",
    "output": "a ** b",
    "description": "Exponential operation",
    "note": "",
    "group": "Stop and Arithmetic Operations"
  },
  "0b": {
    "input": "b | x",
    "output": "y",
    "description": "Extend length of two’s complement signed integer",
    "note": "x is the value, b is the size of x in bytes",
    "group": "Stop and Arithmetic Operations"
  },
  "0c": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "0d": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "0e": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "0f": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "10": {
    "input": "a | b",
    "output": "a < b",
    "description": "Less-than comparison",
    "note": "",
    "group": "Comparison & Bitwise Logic Operations"
  },
  "11": {
    "input": "a | b",
    "output": "a > b",
    "description": "Greater-than comparison",
    "note": "",
    "group": "Comparison & Bitwise Logic Operations"
  },
  "12": {
    "input": "a | b",
    "output": "a < b",
    "description": "Signed less-than comparison",
    "note": "Where all values are treated as two’s complement signed 256-bit integers",
    "group": "Comparison & Bitwise Logic Operations"
  },
  "13": {
    "input": "a | b",
    "output": "a > b",
    "description": "Signed greater-than comparison",
    "note": "Where all values are treated as two’s complement signed 256-bit integers",
    "group": "Comparison & Bitwise Logic Operations"
  },
  "14": {
    "input": "a | b",
    "output": "a == b",
    "description": "Equality comparison",
    "note": "",
    "group": "Comparison & Bitwise Logic Operations"
  },
  "15": {
    "input": "a",
    "output": "a == 0",
    "description": "Simple not operator",
    "note": "",
    "group": "Comparison & Bitwise Logic Operations"
  },
  "16": {
    "input": "a | b",
    "output": "a & b",
    "description": "Bitwise AND operation",
    "note": "",
    "group": "Comparison & Bitwise Logic Operations"
  },
  "17": {
    "input": "a | b",
    "output": "a | b",
    "description": "Bitwise OR operation",
    "note": "",
    "group": "Comparison & Bitwise Logic Operations"
  },
  "18": {
    "input": "a | b",
    "output": "a ^ b",
    "description": "Bitwise XOR operation",
    "note": "",
    "group": "Comparison & Bitwise Logic Operations"
  },
  "19": {
    "input": "a",
    "output": "~a",
    "description": "Bitwise NOT operation",
    "note": "",
    "group": "Comparison & Bitwise Logic Operations"
  },
  "1a": {
    "input": "i | x",
    "output": "y",
    "description": "Retrieve single byte from word",
    "note": "",
    "group": "Comparison & Bitwise Logic Operations"
  },
  "1b": {
    "input": "shift | value",
    "output": "value << shift",
    "description": "Left shift operation",
    "note": "",
    "group": "Comparison & Bitwise Logic Operations"
  },
  "1c": {
    "input": "shift | value",
    "output": "value >> shift",
    "description": "Logical right shift operation",
    "note": "",
    "group": "Comparison & Bitwise Logic Operations"
  },
  "1d": {
    "input": "shift | value",
    "output": "value >> shift",
    "description": "Arithmetic (signed) right shift operation",
    "note": "value is treated as two’s complement signed 256-bit integers",
    "group": "Comparison & Bitwise Logic Operations"
  },
  "1e": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "1f": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "20": {
    "input": "offset | length",
    "output": "hash",
    "description": "Compute Keccak-256 hash",
    "note": "offset and length in bytes",
    "group": "SHA3"
  },
  "21": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "22": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "23": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "24": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "25": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "26": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "27": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "28": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "29": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "2a": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "2b": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "2c": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "2d": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "2e": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "2f": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "30": {
    "input": "",
    "output": "address",
    "description": "Get address of currently executing account",
    "note": "",
    "group": "Environmental Information"
  },
  "31": {
    "input": "address",
    "output": "If address exists: [ balance...\nelse: [ 0",
    "description": "Get balance of the given account",
    "note": "Unit is wei",
    "group": "Environmental Information"
  },
  "32": {
    "input": "",
    "output": "address",
    "description": "Get execution origination address",
    "note": "This is the sender of original transaction; it is never an account with non-empty associated code.",
    "group": "Environmental Information"
  },
  "33": {
    "input": "",
    "output": "address",
    "description": "Get caller address",
    "note": "This is the address of the account that is directly responsible for this execution",
    "group": "Environmental Information"
  },
  "34": {
    "input": "",
    "output": "value",
    "description": "Get deposited value by the instruction/transaction responsible for this execution",
    "note": "Unit is wei",
    "group": "Environmental Information"
  },
  "35": {
    "input": "i",
    "output": "data[i]",
    "description": "Get input data of current environment",
    "note": "256-bit chunk of calldata",
    "group": "Environmental Information"
  },
  "36": {
    "input": "",
    "output": "size",
    "description": "Get size of input data in current environment",
    "note": "Size in bytes",
    "group": "Environmental Information"
  },
  "37": {
    "input": "destOffset | offset | length",
    "output": "",
    "description": "Copy input data in current environment to memory",
    "note": "Copy calldata to memory, values in byte, copy 0s if out of bounds",
    "group": "Environmental Information"
  },
  "38": {
    "input": "",
    "output": "size",
    "description": "Get size of code running in current environment",
    "note": "Size in bytes",
    "group": "Environmental Information"
  },
  "39": {
    "input": "destOffset | offset | length",
    "output": "",
    "description": "Copy code running in current environment to memory",
    "note": "Copy code to memory, values in byte, copy 0s if out of bounds",
    "group": "Environmental Information"
  },
  "3a": {
    "input": "",
    "output": "price",
    "description": "Get price of gas in current environment",
    "note": "This is gas price specified by the originating transaction in wei per gas",
    "group": "Environmental Information"
  },
  "3b": {
    "input": "address",
    "output": "size",
    "description": "Get size of an account’s code",
    "note": "Size in bytes",
    "group": "Environmental Information"
  },
  "3c": {
    "input": "address | destOffset | offset | length",
    "output": "",
    "description": "Copy an account’s code to memory",
    "note": "Copy code to memory, values in byte, copy 0s if out of bounds",
    "group": "Environmental Information"
  },
  "3d": {
    "input": "",
    "output": "size",
    "description": "Get size of output data from the previous call from the current environment",
    "note": "Size in bytes",
    "group": "Environmental Information"
  },
  "3e": {
    "input": "destOffset | offset | length",
    "output": "",
    "description": "Copy output data from the previous call to memory",
    "note": "All parameters in byte",
    "group": "Environmental Information"
  },
  "3f": {
    "input": "address",
    "output": "hash",
    "description": "Get hash of an account’s code",
    "note": "",
    "group": "Environmental Information"
  },
  "40": {
    "input": "blockNumber",
    "output": "hash",
    "description": "Get the hash of one of the 256 most recent complete blocks",
    "note": "If the block number is equal or higher than the current one, or if it is older than the last 256 blocks, writes 0",
    "group": "Block Information"
  },
  "41": {
    "input": "",
    "output": "address",
    "description": "Get the block’s beneficiary address",
    "note": "Miner's address",
    "group": "Block Information"
  },
  "42": {
    "input": "",
    "output": "timestamp",
    "description": "Get the block’s timestamp",
    "note": "Unix timestamp",
    "group": "Block Information"
  },
  "43": {
    "input": "",
    "output": "blockNumber",
    "description": "Get the block’s number",
    "note": "",
    "group": "Block Information"
  },
  "44": {
    "input": "",
    "output": "difficulty",
    "description": "Get the block’s difficulty",
    "note": "",
    "group": "Block Information"
  },
  "45": {
    "input": "",
    "output": "gasLimit",
    "description": "Get the block’s gas limit",
    "note": "",
    "group": "Block Information"
  },
  "46": {
    "input": "",
    "output": "chainId",
    "description": "Get the chain ID",
    "note": "1 for mainnet",
    "group": "Block Information"
  },
  "47": {
    "input": "",
    "output": "balance",
    "description": "Get balance of currently executing account",
    "note": "Unit is wei",
    "group": "Block Information"
  },
  "48": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "49": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "4a": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "4b": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "4c": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "4d": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "4e": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "4f": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "50": {
    "input": "y",
    "output": "",
    "description": "Remove item from stack",
    "note": "",
    "group": "Stack Memory Storage and Flow Operations"
  },
  "51": {
    "input": "offset",
    "output": "value",
    "description": "Load word from memory",
    "note": "Offset in bytes",
    "group": "Stack Memory Storage and Flow Operations"
  },
  "52": {
    "input": "offset | value",
    "output": "",
    "description": "Save word to memory",
    "note": "Offset in bytes",
    "group": "Stack Memory Storage and Flow Operations"
  },
  "53": {
    "input": "offset | value",
    "output": "",
    "description": "Save byte to memory",
    "note": "Offset in bytes",
    "group": "Stack Memory Storage and Flow Operations"
  },
  "54": {
    "input": "key",
    "output": "value",
    "description": "Load word from storage",
    "note": "Reading from an unset key returns 0",
    "group": "Stack Memory Storage and Flow Operations"
  },
  "55": {
    "input": "key | value",
    "output": "",
    "description": "Save word to storage",
    "note": "Storing 0 erases the value",
    "group": "Stack Memory Storage and Flow Operations"
  },
  "56": {
    "input": "counter",
    "output": "",
    "description": "Alter the program counter",
    "note": "Can only jump to JUMPDEST instruction",
    "group": "Stack Memory Storage and Flow Operations"
  },
  "57": {
    "input": "counter | b",
    "output": "",
    "description": "Conditionally alter the program counter",
    "note": "If b is not 0, do the jump, otherwise execute command right after; can only jump to JUMPDEST instruction",
    "group": "Stack Memory Storage and Flow Operations"
  },
  "58": {
    "input": "",
    "output": "counter",
    "description": "Get the value of the program counter prior to the increment corresponding to this instruction",
    "note": "",
    "group": "Stack Memory Storage and Flow Operations"
  },
  "59": {
    "input": "",
    "output": "size",
    "description": "Get the size of active memory in bytes",
    "note": "",
    "group": "Stack Memory Storage and Flow Operations"
  },
  "5a": {
    "input": "",
    "output": "gas",
    "description": "Get the amount of available gas, including the corresponding reduction for the cost of this instruction",
    "note": "",
    "group": "Stack Memory Storage and Flow Operations"
  },
  "5b": {
    "input": "",
    "output": "",
    "description": "Mark a valid destination for jumps",
    "note": "This operation has no effect on machine state during execution",
    "group": "Stack Memory Storage and Flow Operations"
  },
  "5c": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "5d": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "5e": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "5f": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "60": {
    "input": "",
    "output": "value",
    "description": "Place 1 byte item on stack",
    "note": "The byte is read in line from the program code’s bytes array; the byte is right-aligned (takes the lowest significant place in big endian)",
    "group": "Push Operations"
  },
  "61": {
    "input": "",
    "output": "value",
    "description": "Place 2 byte item on stack",
    "note": "The bytes are read in line from the program code’s bytes array; the bytes are right-aligned (takes the lowest significant place in big endian)",
    "group": "Push Operations"
  },
  "62": {
    "input": "",
    "output": "value",
    "description": "Place 3 byte item on stack",
    "note": "The bytes are read in line from the program code’s bytes array; the bytes are right-aligned (takes the lowest significant place in big endian)",
    "group": "Push Operations"
  },
  "63": {
    "input": "",
    "output": "value",
    "description": "Place 4 byte item on stack",
    "note": "The bytes are read in line from the program code’s bytes array; the bytes are right-aligned (takes the lowest significant place in big endian)",
    "group": "Push Operations"
  },
  "64": {
    "input": "",
    "output": "value",
    "description": "Place 5 byte item on stack",
    "note": "The bytes are read in line from the program code’s bytes array; the bytes are right-aligned (takes the lowest significant place in big endian)",
    "group": "Push Operations"
  },
  "65": {
    "input": "",
    "output": "value",
    "description": "Place 6 byte item on stack",
    "note": "The bytes are read in line from the program code’s bytes array; the bytes are right-aligned (takes the lowest significant place in big endian)",
    "group": "Push Operations"
  },
  "66": {
    "input": "",
    "output": "value",
    "description": "Place 7 byte item on stack",
    "note": "The bytes are read in line from the program code’s bytes array; the bytes are right-aligned (takes the lowest significant place in big endian)",
    "group": "Push Operations"
  },
  "67": {
    "input": "",
    "output": "value",
    "description": "Place 8 byte item on stack",
    "note": "The bytes are read in line from the program code’s bytes array; the bytes are right-aligned (takes the lowest significant place in big endian)",
    "group": "Push Operations"
  },
  "68": {
    "input": "",
    "output": "value",
    "description": "Place 9 byte item on stack",
    "note": "The bytes are read in line from the program code’s bytes array; the bytes are right-aligned (takes the lowest significant place in big endian)",
    "group": "Push Operations"
  },
  "69": {
    "input": "",
    "output": "value",
    "description": "Place 10 byte item on stack",
    "note": "The bytes are read in line from the program code’s bytes array; the bytes are right-aligned (takes the lowest significant place in big endian)",
    "group": "Push Operations"
  },
  "6a": {
    "input": "",
    "output": "value",
    "description": "Place 11 byte item on stack",
    "note": "The bytes are read in line from the program code’s bytes array; the bytes are right-aligned (takes the lowest significant place in big endian)",
    "group": "Push Operations"
  },
  "6b": {
    "input": "",
    "output": "value",
    "description": "Place 12 byte item on stack",
    "note": "The bytes are read in line from the program code’s bytes array; the bytes are right-aligned (takes the lowest significant place in big endian)",
    "group": "Push Operations"
  },
  "6c": {
    "input": "",
    "output": "value",
    "description": "Place 13 byte item on stack",
    "note": "The bytes are read in line from the program code’s bytes array; the bytes are right-aligned (takes the lowest significant place in big endian)",
    "group": "Push Operations"
  },
  "6d": {
    "input": "",
    "output": "value",
    "description": "Place 14 byte item on stack",
    "note": "The bytes are read in line from the program code’s bytes array; the bytes are right-aligned (takes the lowest significant place in big endian)",
    "group": "Push Operations"
  },
  "6e": {
    "input": "",
    "output": "value",
    "description": "Place 15 byte item on stack",
    "note": "The bytes are read in line from the program code’s bytes array; the bytes are right-aligned (takes the lowest significant place in big endian)",
    "group": "Push Operations"
  },
  "6f": {
    "input": "",
    "output": "value",
    "description": "Place 16 byte item on stack",
    "note": "The bytes are read in line from the program code’s bytes array; the bytes are right-aligned (takes the lowest significant place in big endian)",
    "group": "Push Operations"
  },
  "70": {
    "input": "",
    "output": "value",
    "description": "Place 17 byte item on stack",
    "note": "The bytes are read in line from the program code’s bytes array; the bytes are right-aligned (takes the lowest significant place in big endian)",
    "group": "Push Operations"
  },
  "71": {
    "input": "",
    "output": "value",
    "description": "Place 18 byte item on stack",
    "note": "The bytes are read in line from the program code’s bytes array; the bytes are right-aligned (takes the lowest significant place in big endian)",
    "group": "Push Operations"
  },
  "72": {
    "input": "",
    "output": "value",
    "description": "Place 19 byte item on stack",
    "note": "The bytes are read in line from the program code’s bytes array; the bytes are right-aligned (takes the lowest significant place in big endian)",
    "group": "Push Operations"
  },
  "73": {
    "input": "",
    "output": "value",
    "description": "Place 20 byte item on stack",
    "note": "The bytes are read in line from the program code’s bytes array; the bytes are right-aligned (takes the lowest significant place in big endian)",
    "group": "Push Operations"
  },
  "74": {
    "input": "",
    "output": "value",
    "description": "Place 21 byte item on stack",
    "note": "The bytes are read in line from the program code’s bytes array; the bytes are right-aligned (takes the lowest significant place in big endian)",
    "group": "Push Operations"
  },
  "75": {
    "input": "",
    "output": "value",
    "description": "Place 22 byte item on stack",
    "note": "The bytes are read in line from the program code’s bytes array; the bytes are right-aligned (takes the lowest significant place in big endian)",
    "group": "Push Operations"
  },
  "76": {
    "input": "",
    "output": "value",
    "description": "Place 23 byte item on stack",
    "note": "The bytes are read in line from the program code’s bytes array; the bytes are right-aligned (takes the lowest significant place in big endian)",
    "group": "Push Operations"
  },
  "77": {
    "input": "",
    "output": "value",
    "description": "Place 24 byte item on stack",
    "note": "The bytes are read in line from the program code’s bytes array; the bytes are right-aligned (takes the lowest significant place in big endian)",
    "group": "Push Operations"
  },
  "78": {
    "input": "",
    "output": "value",
    "description": "Place 25 byte item on stack",
    "note": "The bytes are read in line from the program code’s bytes array; the bytes are right-aligned (takes the lowest significant place in big endian)",
    "group": "Push Operations"
  },
  "79": {
    "input": "",
    "output": "value",
    "description": "Place 26 byte item on stack",
    "note": "The bytes are read in line from the program code’s bytes array; the bytes are right-aligned (takes the lowest significant place in big endian)",
    "group": "Push Operations"
  },
  "7a": {
    "input": "",
    "output": "value",
    "description": "Place 27 byte item on stack",
    "note": "The bytes are read in line from the program code’s bytes array; the bytes are right-aligned (takes the lowest significant place in big endian)",
    "group": "Push Operations"
  },
  "7b": {
    "input": "",
    "output": "value",
    "description": "Place 28 byte item on stack",
    "note": "The bytes are read in line from the program code’s bytes array; the bytes are right-aligned (takes the lowest significant place in big endian)",
    "group": "Push Operations"
  },
  "7c": {
    "input": "",
    "output": "value",
    "description": "Place 29 byte item on stack",
    "note": "The bytes are read in line from the program code’s bytes array; the bytes are right-aligned (takes the lowest significant place in big endian)",
    "group": "Push Operations"
  },
  "7d": {
    "input": "",
    "output": "value",
    "description": "Place 30 byte item on stack",
    "note": "The bytes are read in line from the program code’s bytes array; the bytes are right-aligned (takes the lowest significant place in big endian)",
    "group": "Push Operations"
  },
  "7e": {
    "input": "",
    "output": "value",
    "description": "Place 31 byte item on stack",
    "note": "The bytes are read in line from the program code’s bytes array; the bytes are right-aligned (takes the lowest significant place in big endian)",
    "group": "Push Operations"
  },
  "7f": {
    "input": "",
    "output": "value",
    "description": "Place 32 byte (full word) item on stack",
    "note": "The bytes are read in line from the program code’s bytes array; the bytes are right-aligned (takes the lowest significant place in big endian)",
    "group": "Push Operations"
  },
  "80": {
    "input": "value",
    "output": "value | value",
    "description": "Duplicate 1st stack item",
    "note": "",
    "group": "Duplication Operations"
  },
  "81": {
    "input": "a | b",
    "output": "b | a | b",
    "description": "Duplicate 2nd stack item",
    "note": "",
    "group": "Duplication Operations"
  },
  "82": {
    "input": "a | b | c",
    "output": "c | a | b | c",
    "description": "Duplicate 3rd stack item",
    "note": "",
    "group": "Duplication Operations"
  },
  "83": {
    "input": "... | value",
    "output": "value | ... | value",
    "description": "Duplicate 4th stack item",
    "note": "",
    "group": "Duplication Operations"
  },
  "84": {
    "input": "... | value",
    "output": "value | ... | value",
    "description": "Duplicate 5th stack item",
    "note": "",
    "group": "Duplication Operations"
  },
  "85": {
    "input": "... | value",
    "output": "value | ... | value",
    "description": "Duplicate 6th stack item",
    "note": "",
    "group": "Duplication Operations"
  },
  "86": {
    "input": "... | value",
    "output": "value | ... | value",
    "description": "Duplicate 7th stack item",
    "note": "",
    "group": "Duplication Operations"
  },
  "87": {
    "input": "... | value",
    "output": "value | ... | value",
    "description": "Duplicate 8th stack item",
    "note": "",
    "group": "Duplication Operations"
  },
  "88": {
    "input": "... | value",
    "output": "value | ... | value",
    "description": "Duplicate 9th stack item",
    "note": "",
    "group": "Duplication Operations"
  },
  "89": {
    "input": "... | value",
    "output": "value | ... | value",
    "description": "Duplicate 10th stack item",
    "note": "",
    "group": "Duplication Operations"
  },
  "8a": {
    "input": "... | value",
    "output": "value | ... | value",
    "description": "Duplicate 11th stack item",
    "note": "",
    "group": "Duplication Operations"
  },
  "8b": {
    "input": "... | value",
    "output": "value | ... | value",
    "description": "Duplicate 12th stack item",
    "note": "",
    "group": "Duplication Operations"
  },
  "8c": {
    "input": "... | value",
    "output": "value | ... | value",
    "description": "Duplicate 13th stack item",
    "note": "",
    "group": "Duplication Operations"
  },
  "8d": {
    "input": "... | value",
    "output": "value | ... | value",
    "description": "Duplicate 14th stack item",
    "note": "",
    "group": "Duplication Operations"
  },
  "8e": {
    "input": "... | value",
    "output": "value | ... | value",
    "description": "Duplicate 15th stack item",
    "note": "",
    "group": "Duplication Operations"
  },
  "8f": {
    "input": "... | value",
    "output": "value | ... | value",
    "description": "Duplicate 16th stack item",
    "note": "",
    "group": "Duplication Operations"
  },
  "90": {
    "input": "a | b",
    "output": "b | a",
    "description": "Exchange 1st and 2nd stack items",
    "note": "",
    "group": "Exchange Operations"
  },
  "91": {
    "input": "a | b | c",
    "output": "c | b | a",
    "description": "Exchange 1st and 3rd stack items",
    "note": "",
    "group": "Exchange Operations"
  },
  "92": {
    "input": "a | ... | b",
    "output": "b | ... | a",
    "description": "Exchange 1st and 4th stack items",
    "note": "",
    "group": "Exchange Operations"
  },
  "93": {
    "input": "a | ... | b",
    "output": "b | ... | a",
    "description": "Exchange 1st and 5th stack items",
    "note": "",
    "group": "Exchange Operations"
  },
  "94": {
    "input": "a | ... | b",
    "output": "b | ... | a",
    "description": "Exchange 1st and 6th stack items",
    "note": "",
    "group": "Exchange Operations"
  },
  "95": {
    "input": "a | ... | b",
    "output": "b | ... | a",
    "description": "Exchange 1st and 7th stack items",
    "note": "",
    "group": "Exchange Operations"
  },
  "96": {
    "input": "a | ... | b",
    "output": "b | ... | a",
    "description": "Exchange 1st and 8th stack items",
    "note": "",
    "group": "Exchange Operations"
  },
  "97": {
    "input": "a | ... | b",
    "output": "b | ... | a",
    "description": "Exchange 1st and 9th stack items",
    "note": "",
    "group": "Exchange Operations"
  },
  "98": {
    "input": "a | ... | b",
    "output": "b | ... | a",
    "description": "Exchange 1st and 10th stack items",
    "note": "",
    "group": "Exchange Operations"
  },
  "99": {
    "input": "a | ... | b",
    "output": "b | ... | a",
    "description": "Exchange 1st and 11th stack items",
    "note": "",
    "group": "Exchange Operations"
  },
  "9a": {
    "input": "a | ... | b",
    "output": "b | ... | a",
    "description": "Exchange 1st and 12th stack items",
    "note": "",
    "group": "Exchange Operations"
  },
  "9b": {
    "input": "a | ... | b",
    "output": "b | ... | a",
    "description": "Exchange 1st and 13th stack items",
    "note": "",
    "group": "Exchange Operations"
  },
  "9c": {
    "input": "a | ... | b",
    "output": "b | ... | a",
    "description": "Exchange 1st and 14th stack items",
    "note": "",
    "group": "Exchange Operations"
  },
  "9d": {
    "input": "a | ... | b",
    "output": "b | ... | a",
    "description": "Exchange 1st and 15th stack items",
    "note": "",
    "group": "Exchange Operations"
  },
  "9e": {
    "input": "a | ... | b",
    "output": "b | ... | a",
    "description": "Exchange 1st and 16th stack items",
    "note": "",
    "group": "Exchange Operations"
  },
  "9f": {
    "input": "a | ... | b",
    "output": "b | ... | a",
    "description": "Exchange 1st and 17th stack items",
    "note": "",
    "group": "Exchange Operations"
  },
  "a0": {
    "input": "offset | length",
    "output": "",
    "description": "Append log record with no topics",
    "note": "offset and length to memory in bytes",
    "group": "Logging Operations"
  },
  "a1": {
    "input": "offset | length | topic",
    "output": "",
    "description": "Append log record with one topic",
    "note": "offset and length to memory in bytes",
    "group": "Logging Operations"
  },
  "a2": {
    "input": "offset | length | topic1 | topic2",
    "output": "",
    "description": "Append log record with four topics",
    "note": "offset and length to memory in bytes",
    "group": "Logging Operations"
  },
  "a3": {
    "input": "offset | length | topic1 | topic2 | topic3",
    "output": "",
    "description": "Append log record with four topics",
    "note": "offset and length to memory in bytes",
    "group": "Logging Operations"
  },
  "a4": {
    "input": "offset | length | topic1 | topic2 | topic3 | topic4",
    "output": "",
    "description": "Append log record with four topics",
    "note": "offset and length to memory in bytes",
    "group": "Logging Operations"
  },
  "a5": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "a6": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "a7": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "a8": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "a9": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "aa": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "ab": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "ac": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "ad": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "ae": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "af": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "b0": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "b1": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "b2": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "b3": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "b4": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "b5": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "b6": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "b7": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "b8": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "b9": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "ba": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "bb": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "bc": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "bd": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "be": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "bf": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "c0": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "c1": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "c2": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "c3": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "c4": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "c5": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "c6": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "c7": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "c8": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "c9": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "ca": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "cb": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "cc": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "cd": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "ce": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "cf": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "d0": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "d1": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "d2": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "d3": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "d4": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "d5": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "d6": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "d7": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "d8": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "d9": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "da": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "db": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "dc": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "dd": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "de": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "df": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "e0": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "e1": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "e2": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "e3": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "e4": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "e5": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "e6": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "e7": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "e8": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "e9": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "ea": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "eb": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "ec": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "ed": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "ee": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "ef": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "f0": {
    "input": "value | offset | length",
    "output": "address",
    "description": "Create a new account with associated code",
    "note": "offset and length to memory in bytes, point to the code of the new contract",
    "group": "System operations"
  },
  "f1": {
    "input": "gas | address | value | argsOffset | argsLength | retOffset | retLength",
    "output": "success",
    "description": "Message-call into an account",
    "note": "",
    "group": "System operations"
  },
  "f2": {
    "input": "gas | address | value | argsOffset | argsLength | retOffset | retLength",
    "output": "success",
    "description": "Message-call into this account with alternative account’s code",
    "note": "In fact the same account as at present is called, simply that the code is overwritten",
    "group": "System operations"
  },
  "f3": {
    "input": "offset | length",
    "output": "",
    "description": "Halt execution returning output data",
    "note": "offset and length to memory in bytes",
    "group": "System operations"
  },
  "f4": {
    "input": "gas | address | argsOffset | argsLength | retOffset | retLength",
    "output": "success",
    "description": "Message-call into this account with an alternative account’s code, but persisting the current values for sender and value",
    "note": "In fact the same account as at present is called, simply that the code is overwritten and the context is almost entirely identical",
    "group": "System operations"
  },
  "f5": {
    "input": "value | offset | length | salt",
    "output": "address",
    "description": "Create a new account with associated code",
    "note": "Exactly equivalent to CREATE, except the salt allows to create at a deterministic address",
    "group": "System operations"
  },
  "f6": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "f7": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "f8": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "f9": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "fa": {
    "input": "gas | address | argsOffset | argsLength | retOffset | retLength",
    "output": "success",
    "description": "Static message-call into an account",
    "note": "Equivalent to call with value set to 0",
    "group": "System operations"
  },
  "fb": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "fc": {
    "input": "",
    "output": "",
    "description": "",
    "note": "",
    "group": ""
  },
  "fd": {
    "input": "offset | length",
    "output": "",
    "description": "Halt execution reverting state changes but returning data and remaining gas",
    "note": "offset and length to memory in bytes",
    "group": "System operations"
  },
  "fe": {
    "input": "",
    "output": "",
    "description": "Designated invalid instruction",
    "note": "",
    "group": "System operations"
  },
  "ff": {
    "input": "address",
    "output": "",
    "description": "Halt execution and register account for later deletion",
    "note": "The balance of the current contract is sent to the address",
    "group": "System operations"
  }
}
